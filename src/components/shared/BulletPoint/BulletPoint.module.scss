@use '../../../styles/variables' as vars;
@use '../../../styles/mixins' as mixins;

$hover-bg-bullet: rgba(vars.$color-primary, 0.1);
$disabled-color: rgba(vars.$color-disabled, 0.5);

.bulletContainer {
  position: relative;
  background: vars.$color-action-item-background;
  padding: 6px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05), 0 1px 2px rgba(0, 0, 0, 0.03);
  border-radius: 4px;
  touch-action: pan-y;
}

.bulletContainer:hover {
  background: $hover-bg-bullet;
}

.bulletContainer.regenerating {
  opacity: 0.8;
  pointer-events: none;

  &::before {
    content: '';
    position: absolute;
    inset: 0;
    z-index: 3;
    background: linear-gradient(
      110deg,
      rgba(241, 245, 249, 0.8) 8%,
      rgba(147, 197, 253, 0.3) 18%,
      rgba(241, 245, 249, 0.8) 33%
    );
    background-size: 250% 100%;
    animation: shimmer 1.3s linear infinite;
    border-radius: 4px;
  }
}

.toolbar {
  display: flex;
  justify-content: space-between;
  margin-bottom: 8px;
  position: relative;
  z-index: 2;
}

.toolbarLeft {
  position: relative;
}

.toolbarRight {
  display: flex;
  gap: 8px;
}

// Buttons with hover styles
$btn-hover-colors: (
  deleteButton: vars.$color-error,
  editButton: vars.$color-primary,
  saveButton: vars.$color-transformative,
  regenerateButton: vars.$color-regenerate,
  cancelButton: vars.$color-primary,
);

@each $btn, $color in $btn-hover-colors {
  .#{$btn} {
    @include mixins.icon-button-small;
  }

  .#{$btn}:hover {
    background: $color;
    color: vars.$color-background;
    border-color: $color;
  }
}

// Lock button special states
.lockButton {
  @include mixins.icon-button-small;

  &.locked {
    svg {
      color: vars.$color-badge-red;
    }

    &:hover {
      background: vars.$color-badge-green-background;
      border-color: vars.$color-badge-green;

      svg {
        color: vars.$color-disabled;
      }
    }
  }

  &.unlocked:hover {
    background: vars.$color-badge-red-background;
    border-color: vars.$color-badge-red;
  }
}

$disabled-buttons: (
  deleteButton,
  editButton,
  regenerateButton,
  saveButton,
  cancelButton,
  lockButton
);

@each $btn in $disabled-buttons {
  .#{$btn}:disabled {
    background: vars.$color-background;
    color: $disabled-color;
    border: 1px solid vars.$color-border;
    opacity: 0.7;
    pointer-events: none;
    transform: none;
  }
}

.contentArea {
  position: relative;
  z-index: 1;
}

.keywordHighlight {
  @include mixins.keyword-highlight;
}

.bulletText {
  font-size: 14px;
  line-height: 1.5;
  color: vars.$color-text;
  margin: 0;
  min-height: 80px;
  padding: 8px;
  border-radius: 4px;
  background: vars.$color-background;
  transition: opacity 1s;
  opacity: 1;

  p {
    line-height: 1.75;
    word-break: break-word;
  }

  &.fadingIn p {
    opacity: 0;
    animation: fadeIn 1s forwards;
  }

  &.fadingOut p {
    opacity: 1;
    animation: fadeOut 1s forwards;
  }
}

.bulletInputAreaWrapper {
  display: flex;
  flex-direction: column;
  width: 100%;
  position: relative;
  z-index: 1;
}

.bulletInputArea {
  font-family: vars.$font-family-base;
  font-size: 14px;
  line-height: 1.5;
  padding: 8px;
  border: 1.5px solid vars.$color-primary;
  border-radius: 4px;
  background: vars.$color-background;
  color: vars.$color-text;
  outline: none;
  resize: vertical;
  min-height: 80px;
  box-sizing: border-box;
  touch-action: manipulation;

  &:focus {
    box-shadow: 0 0 0 2px rgba(vars.$color-primary, 0.2);
  }

  &:disabled {
    background: vars.$color-background;
    color: $disabled-color;
    border-color: vars.$color-border;
    opacity: 0.7;
    pointer-events: none;
  }
}

.contentFooter {
  margin-top: 8px;
}

.characterCount {
  @include mixins.character-count;
}

.characterCountWarning {
  @include mixins.character-count;
  @include mixins.flash-warning;
}

.characterCountExceeded {
  @include mixins.character-count;
  color: vars.$color-error;
  font-weight: 600;
}

.formError {
  @include mixins.form-error;
}

.flashWarning {
  @include mixins.flash-warning;
}
